Operators
-----
SELECT 1 + 2 * 3
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::PLUS
							[left] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 1
								)
							[right] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MULTIPLICATION
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 2
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 3
										)
								)
						)
				)
		)
)
-----
SELECT 1 / 2 + 3
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::PLUS
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::DIVISION
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 2
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 3
								)
						)
				)
		)
)
-----
SELECT 1 * 2 / 3 % 4 MOD 5 DIV 6 + 7 * 8 / 10
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::PLUS
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::INT_DIVISION
									[left] => MariaStan\Ast\Expr\BinaryOp
										(
											[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MODULO
											[left] => MariaStan\Ast\Expr\BinaryOp
												(
													[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MODULO
													[left] => MariaStan\Ast\Expr\BinaryOp
														(
															[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::DIVISION
															[left] => MariaStan\Ast\Expr\BinaryOp
																(
																	[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MULTIPLICATION
																	[left] => MariaStan\Ast\Expr\LiteralInt
																		(
																			[value] => 1
																		)
																	[right] => MariaStan\Ast\Expr\LiteralInt
																		(
																			[value] => 2
																		)
																)
															[right] => MariaStan\Ast\Expr\LiteralInt
																(
																	[value] => 3
																)
														)
													[right] => MariaStan\Ast\Expr\LiteralInt
														(
															[value] => 4
														)
												)
											[right] => MariaStan\Ast\Expr\LiteralInt
												(
													[value] => 5
												)
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 6
										)
								)
							[right] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::DIVISION
									[left] => MariaStan\Ast\Expr\BinaryOp
										(
											[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MULTIPLICATION
											[left] => MariaStan\Ast\Expr\LiteralInt
												(
													[value] => 7
												)
											[right] => MariaStan\Ast\Expr\LiteralInt
												(
													[value] => 8
												)
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 10
										)
								)
						)
				)
		)
)
-----
SELECT 0 AND 1 OR 1
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOGIC_OR
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOGIC_AND
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 0
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 1
								)
						)
				)
		)
)
-----
SELECT 0 XOR 0 OR 1
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOGIC_OR
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOGIC_XOR
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 0
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 0
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 1
								)
						)
				)
		)
)
-----
SELECT 1 = 2 <=> 3 >= 4 > 5 <= 6 < 7 <> 8 != 9
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::NOT_EQUAL
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::NOT_EQUAL
									[left] => MariaStan\Ast\Expr\BinaryOp
										(
											[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOWER
											[left] => MariaStan\Ast\Expr\BinaryOp
												(
													[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::LOWER_OR_EQUAL
													[left] => MariaStan\Ast\Expr\BinaryOp
														(
															[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::GREATER
															[left] => MariaStan\Ast\Expr\BinaryOp
																(
																	[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::GREATER_OR_EQUAL
																	[left] => MariaStan\Ast\Expr\BinaryOp
																		(
																			[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::NULL_SAFE_EQUAL
																			[left] => MariaStan\Ast\Expr\BinaryOp
																				(
																					[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::EQUAL
																					[left] => MariaStan\Ast\Expr\LiteralInt
																						(
																							[value] => 1
																						)
																					[right] => MariaStan\Ast\Expr\LiteralInt
																						(
																							[value] => 2
																						)
																				)
																			[right] => MariaStan\Ast\Expr\LiteralInt
																				(
																					[value] => 3
																				)
																		)
																	[right] => MariaStan\Ast\Expr\LiteralInt
																		(
																			[value] => 4
																		)
																)
															[right] => MariaStan\Ast\Expr\LiteralInt
																(
																	[value] => 5
																)
														)
													[right] => MariaStan\Ast\Expr\LiteralInt
														(
															[value] => 6
														)
												)
											[right] => MariaStan\Ast\Expr\LiteralInt
												(
													[value] => 7
												)
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 8
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 9
								)
						)
				)
		)
)
-----
SELECT 0 & 1 | 1 ^ 0
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::BITWISE_OR
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::BITWISE_AND
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 0
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
								)
							[right] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::BITWISE_XOR
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 0
										)
								)
						)
				)
		)
)
-----
SELECT 1 << 2 >> 3
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::SHIFT_RIGHT
							[left] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::SHIFT_LEFT
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 2
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 3
								)
						)
				)
		)
)
-----
SELECT NOT 1 - 1, !1 - 1
-----
MariaStan\Ast\Query\SelectQuery
(
	[select] => Array
		(
			[0] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\UnaryOp
						(
							[operation] => MariaStan\Ast\Expr\UnaryOpTypeEnum::LOGIC_NOT
							[expr] => MariaStan\Ast\Expr\BinaryOp
								(
									[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MINUS
									[left] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
									[right] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
								)
						)
				)
			[1] => MariaStan\Ast\SelectExpr\RegularExpr
				(
					[expr] => MariaStan\Ast\Expr\BinaryOp
						(
							[operation] => MariaStan\Ast\Expr\BinaryOpTypeEnum::MINUS
							[left] => MariaStan\Ast\Expr\UnaryOp
								(
									[operation] => MariaStan\Ast\Expr\UnaryOpTypeEnum::LOGIC_NOT
									[expr] => MariaStan\Ast\Expr\LiteralInt
										(
											[value] => 1
										)
								)
							[right] => MariaStan\Ast\Expr\LiteralInt
								(
									[value] => 1
								)
						)
				)
		)
)